/**
 * @file kdtree.cpp
 * Implementation of KDTree class.
 */

/*Determines if Point a is smaller than Point b in a given dimension d.
* If there is a tie, break it with Point::operator<().
*/
template <int Dim>
bool KDTree<Dim>::smallerDimVal(const Point<Dim>& first,
                                const Point<Dim>& second, int curDim) const
{
    /**
     * @todo Implement this function!
     */
    if(curDim<=Dim&&curDim>=0){//check for bad inputs
      if(first[curDim]==second[curDim]){
        return first<second;
      }
      else{
        return first[curDim]<second[curDim];
      }
    }
    else{
      return false;
    }
}

template <int Dim>
int KDTree<Dim>::distance(const Point<Dim>& first, const Point<Dim>& second) const{
  int retval = 0;
  for(size_t i = 0; i< Dim;i++){
    retval = retval + pow((first[i]-second[i]),2);
  }
  return retval;
}

template <int Dim>
bool KDTree<Dim>::shouldReplace(const Point<Dim>& target,
                                const Point<Dim>& currentBest,
                                const Point<Dim>& potential) const
{
    /**
     * @todo Implement this function!
     */
    int distancePotent = distance(target,potential);
    int distanceCurrBest = distance(target,currentBest);
    if(distancePotent==distanceCurrBest){
      return potential<currentBest;
    }else{
      return distancePotent<distanceCurrBest;
    }
}

template <int Dim>
void KDTree<Dim>::swap(vector<Point<Dim>>& pointArray,int first,int second){
  Point<Dim> temp = pointArray[first];
  pointArray[first] = pointArray[second];
  pointArray[second] = temp;
}

/*this function do partition on an array of points on demension Dim
*/
template <int Dim>//how to pass the Dim into the function?-do not need to pass, can direcly use it, will be the overall dim of the KDTree
int KDTree<Dim>::partition(vector<Point<Dim>>& pointArray,int lo,int hi,int pivotIndex,int currDim){
  //move the index out if the way, for now we will put it at the end if the array
  /*
  Point<Dim> pivotValue = pointArray[pivotIndex];
  int left = lo+1;
  int right = hi;
  swap(pointArray,lo,pivotIndex);
  //start working in, from both L and R ends of the list
  while(left<right){
    if(smallerDimVal(pointArray[left],pivotValue,currDim)){
      swap(pointArray,left,right);
      right--;
    }else{
      left++;
    }
  }
  //the povit number will need to go to the left of the final
  //boundary if the last value is larger than the pivot number
  if(smallerDimVal(pivotValue,pointArray[left],currDim)){
    left--;
  }
  swap(pointArray,lo,left);
  return left;
  */
  //COPYED FROM GOOGLE!
  Point<Dim> pivotValue = pointArray[pivotIndex];
  swap(pointArray,pivotIndex,hi);
  int storeIndex = lo;
  for(int i = lo;i<hi;i++){
    if(smallerDimVal(pointArray[i],pivotValue,currDim)){
      swap(pointArray,storeIndex,i);
      storeIndex++;
    }
  }
  swap(pointArray,hi,storeIndex);
  return storeIndex;
}

/*this function will find the median of the array and partition the array and return the median object*/
template <int Dim>//how to pass the dim into the function?????
Point<Dim> KDTree<Dim>::quickSelect(vector<Point<Dim>>& pointArray,int lo,int hi,int pivotIndex,int currDim){
  if(lo==hi){
    return pointArray[lo];
  }
  int pivot =(lo+hi)/2;//just a guess!!!
  pivot = partition(pointArray,lo,hi,pivot,currDim);
  if(pivotIndex == pivot){
    return pointArray[pivotIndex];
  }
  else if(pivotIndex<pivot){
    return quickSelect(pointArray,lo,pivot-1,pivotIndex,currDim);
  }
  else{
    return quickSelect(pointArray,pivot+1,hi,pivotIndex,currDim);
  }
}

template <int Dim>
void KDTree<Dim>::buildTreeHelper(vector<Point<Dim>>& newPoints, int lo, int hi,int currDim){
  if(lo>hi){
    return;
  }
  int mid = (lo+hi)/2;
  Point<Dim> pivot = quickSelect(newPoints,lo,hi,mid,currDim);
  buildTreeHelper(newPoints,lo,mid-1,(currDim+1)%Dim);
  buildTreeHelper(newPoints,mid+1,hi,(currDim+1)%Dim);//need demension!!!
}

template <int Dim>
KDTree<Dim>::KDTree(const vector<Point<Dim>>& newPoints)
{
    /**
     * @todo Implement this function!
     */
     //Find medium as the root
     //partition according to this medium
     vector<Point<Dim>> tempPoints = newPoints;
     buildTreeHelper(tempPoints,0,newPoints.size()-1,0);
     this->points = tempPoints;
}


template <int Dim>
Point<Dim> KDTree<Dim>::findNearestNeighbor(const Point<Dim>& query) const
{
    /**
     * @todo Implement this function!
     */
    return findNearestHelper(this->points,query,0,points.size()-1,0);
}

template <int Dim>
Point<Dim> KDTree<Dim>::findNearestHelper(const vector<Point<Dim>>& pointArray,const Point<Dim>& query,int lo,int hi,int currDim) const{
  int mid = (lo+hi)/2;
  Point<Dim> currentBest;
  if(lo >= hi){//it is a leaf node, the currentBest is set to the point through return
    return pointArray[lo];
  }
  //if distance between the other subtree is smaller than bestDistance, still need to go to left tree
  if(smallerDimVal(query,pointArray[mid],currDim)){
    currentBest =  findNearestHelper(pointArray, query, lo, mid-1, (currDim+1)%Dim);
    if(shouldReplace(query,currentBest,pointArray[mid])){
      currentBest =  pointArray[mid];
    }
    int radius = distance(currentBest,query);
    if(std::pow((query[currDim]-pointArray[mid][currDim]),2)<=radius){//if the circle intersect with another rectangle,need to go to another part of the tree
      Point<Dim> restBest = findNearestHelper(pointArray,query,mid+1,hi,(currDim+1)%Dim);
      if(shouldReplace(query,currentBest,restBest)){
        currentBest = restBest;
      }
    }
  }
  else{
    currentBest = findNearestHelper(pointArray, query, mid+1, hi, (currDim+1)%Dim);
    if(shouldReplace(query,currentBest,pointArray[mid])){
      currentBest = pointArray[mid];
    }
    int radius = distance(currentBest,query);
    if(std::pow((query[currDim]-pointArray[mid][currDim]),2)<=radius)/*need to go to another part of the tree*/{
      Point<Dim> restBest = findNearestHelper(pointArray,query,lo,mid-1,(currDim+1)%Dim);
      if(shouldReplace(query,currentBest,restBest)){
        currentBest = restBest;
      }
    }
  }
  return currentBest;
}
