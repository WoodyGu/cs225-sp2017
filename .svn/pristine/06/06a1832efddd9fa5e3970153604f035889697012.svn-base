#include "scene.h"
#include "image.h"
#include <iostream>
using namespace std;

Scene::Scene(int max){//mouwentei
	maxLayers = max;
	imageArray = new Image*[max];
	xcoords = new unsigned long[max];
	ycoords = new unsigned long[max];
	for(int i = 0; i < max;i++){
		imageArray[i] = NULL;
		xcoords[i] = 0;
		ycoords[i] = 0;
	}
	cout<<"consOK"<<endl;
}

Scene::~Scene(){//mouwentei
	for(int i = 0;i<maxLayers;i++){
		if(imageArray[i]!=NULL){
			delete imageArray[i];
			imageArray[i] = NULL;
		}
	}
	delete imageArray;
	delete xcoords;
	delete ycoords;
	imageArray = NULL;
	xcoords = NULL;
	ycoords = NULL;
	cout<<"desOK"<<endl;
	}
	
Scene::Scene(const Scene & source){//mouwentei
	copy(source);
}

const Scene &Scene::operator=(const Scene & source){
	if(this!= &source){
		clear();
		copy(source);
	}
	cout<<"opraOK"<<endl;
	return *this;
}	
		
void Scene::changemaxlayers(int newmax){
	Image** temp = new Image*[newmax];
	int nonNull = 0;
	for(int i = 0; i<maxLayers;i++){
		if(imageArray[i]!=NULL)
		nonNull++;
	}
	if(nonNull>maxLayers){
		cout << "invalid newmax" << endl;
		delete temp;
		return;
	}else{
		for(int i = 0; i<maxLayers;i++){
				if(imageArray[i]!=NULL&&i<newmax){
					temp[i] = imageArray[i];
				}else if(imageArray[i]!=NULL&&i>newmax){
					cout << "invalid newmax" << endl;
				}
			}
		}
		delete imageArray;
		imageArray = temp;
		temp = NULL;
		cout<<"changemaxlayerOK"<<endl;
}
		
					
	
void Scene::addpicture(const char* FileName, int index,int x,int y){
	if(index>maxLayers||index<0){
		cout << "index out of bounds" << endl;
		return;
	}
	Image* imageIn = new Image;
	imageIn->readFromFile(FileName);
	imageArray[index] = imageIn;
	xcoords[index] = x;
	ycoords[index] = y;
	cout<<"addPicOK"<<endl;
}

void Scene::changelayer(int index, int newindex){
	Image* temp = imageArray[index];
	imageArray[index] = imageArray[newindex];
	imageArray[newindex] = temp;
}

void Scene::translate(int index, int xcoord, int ycoord){
	if(imageArray[index]==NULL||index>maxLayers||index<0){
		cout << "invalid index" << endl;
		return;
	}
	xcoords[index] = xcoord;
	ycoords[index] = ycoord;
}

void Scene::deletepicture(int index){
if(imageArray[index]==NULL||index>maxLayers||index<0){
		cout << "invalid index" << endl;
		return;
	}
	delete imageArray[index];
	imageArray[index] = NULL;
	xcoords[index] = 0;
	ycoords[index] = 0;
}

Image* Scene::getpicture(int index)const{
	if(imageArray[index]==NULL){
		cout << "invalid index" << endl;
		return NULL;
	}
	return imageArray[index];
}

Image Scene::drawscene() const{
	unsigned long height = 0;
	unsigned long width = 0;
	cout<<"widthHeightIni"<<endl;
	for(int i = 0;i<maxLayers;i++){
		if(imageArray[i]!=NULL){
			if(imageArray[i]->width()+xcoords[i]>width){
				 width = imageArray[i]->width()+xcoords[i];
			}
			if(imageArray[i]->height()+ycoords[i]>height){
				 height = imageArray[i]->height()+ycoords[i];
			}
		}
	}
	cout<<"widthHeightOK"<<endl;
	Image output = Image();
	output.resize(width,height);
	cout<<"resizeOK"<<endl;
	for(int i = 0;i<maxLayers;i++){
		if(imageArray[i]!=NULL){
			for(int k = xcoords[k];i<xcoords[k]+imageArray[k]->width();k++){
				for(int j = ycoords[j];j<ycoords[j]+imageArray[j]->height();i++){
					*(output(k,j)) = *(imageArray[i]->operator()((k-xcoords[k]),(j-ycoords[j])));
				}
			}
		}
	}
		cout<<"drawsceneOK"<<endl;
		return output;
}

void Scene::copy(const Scene & other){
	maxLayers = other.maxLayers;
	imageArray = new Image*[other.maxLayers];
	xcoords = new unsigned long[maxLayers];
	ycoords = new unsigned long[maxLayers];
	for(int i = 0;i<maxLayers;i++){
		imageArray[i] = other.imageArray[i];
		xcoords[i] = other.xcoords[i];
		ycoords[i] = other.ycoords[i];
		if(other.imageArray[i]!=NULL){
			imageArray[i] = new Image(*(other.imageArray[i]));
		}
		else{
		imageArray[i] = NULL;
		}
	}
}
		
void Scene::clear(){
	delete imageArray;
	delete xcoords;
	delete ycoords;
	imageArray = NULL;
	xcoords = NULL;
	ycoords = NULL;
}

	
	
