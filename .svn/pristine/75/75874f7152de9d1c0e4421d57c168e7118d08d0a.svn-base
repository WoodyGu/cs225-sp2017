Exam #3 score (penggu2): 100/200

=== Grade Feedback for Problem "programming_linkedlist_animalShelter_3func" ===
[6/6]: Test: Empty list returns NULL
[4/4]: Test: List of 1 dog returns NULL when requesting a cat
[4/4]: Test: List of multiple dogs returns NULL when requesting a cat
[4/4]: Test: List of 1 cat returns NULL when requesting a dog
[4/4]: Test: List of multiple cats returns NULL when requesting a dog
[4/4]: Test: Removing the only element in the list (reference check)
[4/4]: Test: Removing from a one-element list (value check)
[20/20]: Test: Full exam-provided example (reference)
[50/50]: Test: Full exam-provided example (value)
=====
[100/100]

--- stdout ---
g++ animal.cpp cat.cpp dog.cpp animal-test.cpp list.cpp -std=c++1y -lpng -lpthread -g -o animal-test
===============================================================================
All tests passed (1 assertion in 1 test case)

===============================================================================
All tests passed (1 assertion in 1 test case)

===============================================================================
All tests passed (1 assertion in 1 test case)

===============================================================================
All tests passed (1 assertion in 1 test case)

===============================================================================
All tests passed (1 assertion in 1 test case)

===============================================================================
All tests passed (2 assertions in 1 test case)

===============================================================================
All tests passed (2 assertions in 1 test case)

===============================================================================
All tests passed (5 assertions in 1 test case)

===============================================================================
All tests passed (5 assertions in 1 test case)

===============================================================================
All tests passed (19 assertions in 9 test cases)



--- stderr ---


--- submitted file: list.cpp ---
#define _LIST_CPP
#include "list.h"
#include "animal.h"
#include <cstddef>

//
//  In the `List` class, complete the `adoptCat`, `adoptDog`, and `adoptAny`
// member function in `list.cpp`.  Each of these functions must:
//
// 1. find the animal closest to the head of the list that meets the function
//    preferences (if a suitable animal exists),
// 2. remove that node from the list, and
// 3. return a pointer to the `Animal` (if a suitable animal was found) **or**
//    `NULL` if no animal was found
//

template <class T>
const Animal *List<T>::adoptCat() {
	if(head==NULL){
		return NULL;
	}
	ListNode *curr = head;
	while(curr!=NULL){
		if(curr->data->getType()=="Cat"){
			if(curr == head){
				head = head->next;
				return curr->data;
			}
			ListNode* temp = head;
			while(temp->next!= curr){
				temp = temp->next;
			}
			temp->next = curr->next;
					break;
		}
		curr = curr->next;
	}
	if(curr == NULL){
		return NULL;
	}
	return curr->data;
}

template <class T>
const Animal *List<T>::adoptDog() {
  if(head==NULL){
		return NULL;
	}
	ListNode *curr = head;
	while(curr!=NULL){
		if(curr->data->getType()=="Dog"){
			if(curr == head){
				head = head->next;
				return curr->data;
			}
			ListNode* temp = head;
			while(temp->next!= curr){
				temp = temp->next;
			}
			temp->next = curr->next;
					break;
		}
		curr = curr->next;
	}
	if(curr == NULL){
		return NULL;
	}
	return curr->data;
}

template <class T>
const Animal *List<T>::adoptAny() {
	if(head == NULL){
		return NULL;
	}
	ListNode* curr = head;
	head = head->next;
  	return curr->data;
}



template <class T>
List<T>::List() {
  this->head = NULL;
}

template <class T>
void List<T>::insertFront(const T& ndata) {
  ListNode* node = new ListNode(ndata);
  node->next = head;
  this->head = node;
}


=== Grade Feedback for Problem "programming_linkedlist_gameNight_leaders4_start" ===
[0/30]: Test: List of six people (by ref)
[0/70]: Test: List of six people (by value)
=====
[0/100]

--- stdout ---
g++ gameNight-test.cpp list-p2.cpp person.cpp -std=c++1y -lpng -lpthread -g -o gameNight-test

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gameNight-test is a Catch v1.8.1 host application.
Run with -? for options

-------------------------------------------------------------------------------
List of six people (by ref)
-------------------------------------------------------------------------------
gameNight-test.cpp:26
...............................................................................

gameNight-test.cpp:16: FAILED:
  CHECK( p == expected )
with expansion:
  0x00007ffcb6ba9740 == 0x00007ffcb6ba9710
with message:
  [1]: Bob; expected: Erin

gameNight-test.cpp:16: FAILED:
  CHECK( p == expected )
with expansion:
  0x00007ffcb6ba9730 == 0x00007ffcb6ba9740
with message:
  [2]: Carol; expected: Bob

gameNight-test.cpp:16: FAILED:
  CHECK( p == expected )
with expansion:
  0x00007ffcb6ba9720 == 0x00007ffcb6ba9730
with message:
  [3]: Don; expected: Carol

gameNight-test.cpp:16: FAILED:
  CHECK( p == expected )
with expansion:
  0x00007ffcb6ba9710 == 0x00007ffcb6ba9720
with message:
  [4]: Erin; expected: Don

===============================================================================
test cases: 1 | 1 failed
assertions: 6 | 2 passed | 4 failed


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gameNight-test is a Catch v1.8.1 host application.
Run with -? for options

-------------------------------------------------------------------------------
List of six people (by value)
-------------------------------------------------------------------------------
gameNight-test.cpp:54
...............................................................................

gameNight-test.cpp:22: FAILED:
  CHECK( p->getName() == expected->getName() )
with expansion:
  "Bob" == "Erin"
with message:
  [1]: Bob; expected: Erin

gameNight-test.cpp:22: FAILED:
  CHECK( p->getName() == expected->getName() )
with expansion:
  "Carol" == "Bob"
with message:
  [2]: Carol; expected: Bob

gameNight-test.cpp:22: FAILED:
  CHECK( p->getName() == expected->getName() )
with expansion:
  "Don" == "Carol"
with message:
  [3]: Don; expected: Carol

gameNight-test.cpp:22: FAILED:
  CHECK( p->getName() == expected->getName() )
with expansion:
  "Erin" == "Don"
with message:
  [4]: Erin; expected: Don

===============================================================================
test cases: 1 | 1 failed
assertions: 6 | 2 passed | 4 failed


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gameNight-test is a Catch v1.8.1 host application.
Run with -? for options

-------------------------------------------------------------------------------
List of six people (by ref)
-------------------------------------------------------------------------------
gameNight-test.cpp:26
...............................................................................

gameNight-test.cpp:16: FAILED:
  CHECK( p == expected )
with expansion:
  0x00007fff07c68780 == 0x00007fff07c68750
with message:
  [1]: Bob; expected: Erin

gameNight-test.cpp:16: FAILED:
  CHECK( p == expected )
with expansion:
  0x00007fff07c68770 == 0x00007fff07c68780
with message:
  [2]: Carol; expected: Bob

gameNight-test.cpp:16: FAILED:
  CHECK( p == expected )
with expansion:
  0x00007fff07c68760 == 0x00007fff07c68770
with message:
  [3]: Don; expected: Carol

gameNight-test.cpp:16: FAILED:
  CHECK( p == expected )
with expansion:
  0x00007fff07c68750 == 0x00007fff07c68760
with message:
  [4]: Erin; expected: Don

-------------------------------------------------------------------------------
List of six people (by value)
-------------------------------------------------------------------------------
gameNight-test.cpp:54
...............................................................................

gameNight-test.cpp:22: FAILED:
  CHECK( p->getName() == expected->getName() )
with expansion:
  "Bob" == "Erin"
with message:
  [1]: Bob; expected: Erin

gameNight-test.cpp:22: FAILED:
  CHECK( p->getName() == expected->getName() )
with expansion:
  "Carol" == "Bob"
with message:
  [2]: Carol; expected: Bob

gameNight-test.cpp:22: FAILED:
  CHECK( p->getName() == expected->getName() )
with expansion:
  "Don" == "Carol"
with message:
  [3]: Don; expected: Carol

gameNight-test.cpp:22: FAILED:
  CHECK( p->getName() == expected->getName() )
with expansion:
  "Erin" == "Don"
with message:
  [4]: Erin; expected: Don

===============================================================================
test cases:  2 | 2 failed
assertions: 12 | 4 passed | 8 failed



--- stderr ---


--- submitted file: list-p2.cpp ---
#define _LIST_CPP
#include "list.h"
#include "person.h"

#include <cstddef>


//
// In the `List` class, complete the `reorganizeList` member function in
// `list.cpp`.  The `reorganizeList` function must place all leaders at the
// front of the list followed by all non-leaders, while otherwise maintain
// the same order.
//

template <class T>
void List<T>::reorganizeList() {
	if(this->head == NULL){
		return;
	}
	ListNode* tail = head;
	while(tail->next!=NULL){
		tail = tail->next;
	}
	ListNode* curr = head;
	int count = 0;
	while(curr!=tail){
		if(count%4 != 0){
			this->insertBack(curr->data);
			
		}
		curr = curr->next;
		count++;
	}
}



template <class T>
List<T>::List() {
  this->head = NULL;
}

template <class T>
void List<T>::insertBack(const T& ndata) {
  static int ct = 0;

  ListNode* node = new ListNode(ndata);
  node->leader = (ct++ % 4 == 0);

  if (!head) {
    head = node;
  } else {
    ListNode *thru = head;
    while (thru->next != NULL) { thru = thru->next; }
    thru->next = node;
  }
}

template <class T>
const T *List<T>::get(int index) const {
  ListNode *thru = head;
  while (thru && index-- > 0) { thru = thru->next; }

  if (thru) { return &(thru->data); }
  else      { return NULL; }
}


